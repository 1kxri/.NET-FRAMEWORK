using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LAB_6.NET_FW
{
    public partial class Form1 : Form
    {
        private int nextPlaneId = 1;
        private List<int> numbers = new List<int>();
        private List<PassengerPlane> planes_2 = new List<PassengerPlane>();
        SortedList planes_3 = new SortedList();
        public Form1()
        {
            InitializeComponent();
        }

        private void UpdateCollectionDisplay()
        {
            textBox5.Text = string.Join(", ", numbers);
        }

        private void UpdatePlanesCOL()
        {
            if (planes_2.Count == 0)
            {
                textBox11.Text = "Коллекция пуста";
                return;
            }

            textBox11.Font = new Font("Consolas", 13f);

            string line = "x" + new string('-', 68) + "x" + Environment.NewLine;

            StringBuilder sb = new StringBuilder();
            sb.Append(line);
            sb.AppendFormat("| {0,-23} | {1,-23} | {2,-6} | {3,-5} |{4}",
                            "Авиакомпания", "Модель", "Год", "Мест", Environment.NewLine);
            sb.Append(line);

            foreach (var p in planes_2)
            {
                sb.AppendFormat("| {0,-23} | {1,-23} | {2,-6} | {3,-5} |{4}",
                                p.AirlineName, p.Model, p.Year, p.Seats, Environment.NewLine);
            }

            sb.Append(line);
            textBox11.Text = sb.ToString();
            textBox11.SelectionStart = 0;
            textBox11.ScrollToCaret();
        }

        private void UpdateSortedPlanesCOL()
        {
            if (planes_3.Count == 0)
            {
                textBox14.Text = "Коллекция пуста";
                return;
            }

            textBox14.Font = new Font("Consolas", 12f);
            string line = "x" + new string('-', 73) + "x" + Environment.NewLine;

            StringBuilder sb = new StringBuilder();
            sb.Append(line);
            sb.AppendFormat("| {0,-4} | {1,-22} | {2,-22} | {3,-6} | {4,-5} |{5}",
                            "iD", "Авиакомпания", "Модель", "Год", "Мест", Environment.NewLine);
            sb.Append(line);

            foreach (DictionaryEntry entry in planes_3)
            {
                int id = (int)entry.Key;
                PassengerPlane p = (PassengerPlane)entry.Value;

                sb.AppendFormat("| {0,-4} | {1,-22} | {2,-22} | {3,-6} | {4,-5} |{5}",
                                id, p.AirlineName, p.Model, p.Year, p.Seats, Environment.NewLine);
            }

            sb.Append(line);
            textBox14.Text = sb.ToString();
            textBox14.SelectionStart = 0;
            textBox14.ScrollToCaret();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            string input = textBox1.Text.Trim();
            if (string.IsNullOrWhiteSpace(input))
            {
                textBox4.Text = "Пустой ввод";
                return;
            }

            string[] parts = input.Split(' ');
            List<int> added = new List<int>();
            List<int> duplicates = new List<int>();
            List<string> invalid = new List<string>();

            foreach (var part in parts)
            {
                if (int.TryParse(part, out int num))
                {
                    if (numbers.Contains(num))
                        duplicates.Add(num);
                    else
                    {
                        numbers.Add(num);
                        added.Add(num);
                    }
                }
                else
                    invalid.Add(part);
            }

            UpdateCollectionDisplay();

            textBox4.Clear();
            if (added.Count > 0)
                textBox4.AppendText("Добавлено: " + string.Join(", ", added) + Environment.NewLine);
            if (duplicates.Count > 0)
                textBox4.AppendText("Уже есть: " + string.Join(", ", duplicates) + Environment.NewLine);
            if (invalid.Count > 0)
                textBox4.AppendText("Некорректный ввод: " + string.Join(", ", invalid) + Environment.NewLine);

            textBox4.SelectionStart = 0;
            textBox4.ScrollToCaret();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            string input = textBox2.Text.Trim();
            if (string.IsNullOrWhiteSpace(input))
            {
                textBox4.Text = "Пустой ввод";
                return;
            }

            string[] parts = input.Split(' ');
            List<int> removed = new List<int>();
            List<int> notFound = new List<int>();
            List<string> invalid = new List<string>();

            foreach (var part in parts)
            {
                if (string.IsNullOrWhiteSpace(part)) continue;

                if (int.TryParse(part, out int num))
                {
                    if (numbers.Remove(num))
                        removed.Add(num);
                    else
                        notFound.Add(num);
                }
                else
                    invalid.Add(part);
            }

            UpdateCollectionDisplay();

            textBox4.Clear();
            if (removed.Count > 0)
                textBox4.AppendText("Удалено: " + string.Join(", ", removed) + Environment.NewLine);
            if (notFound.Count > 0)
                textBox4.AppendText("Не найдено: " + string.Join(", ", notFound) + Environment.NewLine);
            if (invalid.Count > 0)
                textBox4.AppendText("Некорректный ввод: " + string.Join(", ", invalid) + Environment.NewLine);

            textBox4.SelectionStart = 0;
            textBox4.ScrollToCaret();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            string input = textBox3.Text.Trim();
            if (string.IsNullOrWhiteSpace(input))
            {
                textBox4.Text = "Пустой ввод";
                return;
            }

            string[] parts = input.Split(' ');
            List<int> found = new List<int>();
            List<int> notFound = new List<int>();
            List<string> invalid = new List<string>();

            foreach (var part in parts)
            {
                if (int.TryParse(part, out int num))
                {
                    if (numbers.Contains(num))
                        found.Add(num);
                    else
                        notFound.Add(num);
                }
                else
                    invalid.Add(part);
            }

            textBox4.Clear();
            if (found.Count > 0)
                textBox4.AppendText("Найдено: " + string.Join(", ", found) + Environment.NewLine);
            if (notFound.Count > 0)
                textBox4.AppendText("Не найдено: " + string.Join(", ", notFound) + Environment.NewLine);
            if (invalid.Count > 0)
                textBox4.AppendText("Некорректный ввод: " + string.Join(", ", invalid) + Environment.NewLine);

            textBox4.SelectionStart = 0;
            textBox4.ScrollToCaret();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            numbers.Sort();
            UpdateCollectionDisplay();
            textBox4.Clear();
            textBox4.AppendText("Коллекция отсортирована" + Environment.NewLine);

            textBox4.SelectionStart = 0;
            textBox4.ScrollToCaret();
        }

        private void button5_Click(object sender, EventArgs e)
        {
            numbers.Clear();
            textBox5.Clear();
            textBox4.Clear();
            textBox4.AppendText("Коллекция полностью очищена" + Environment.NewLine);

            textBox4.SelectionStart = 0;
            textBox4.ScrollToCaret();
        }

        private void button7_Click(object sender, EventArgs e)
        {
            textBox10.Clear();

            if (planes_2.Count == 0)
            {
                textBox10.Text = "Коллекция пуста, сортировка невозможна";
                return;
            }

            planes_2.Sort((a, b) => a.Year.CompareTo(b.Year));
            textBox10.Text = "Коллекция отсортирована по году выпуска";
            UpdatePlanesCOL();
        }

        private void tabPage2_Click(object sender, EventArgs e)
        {

        }

        private void button9_Click(object sender, EventArgs e)
        {
            textBox10.Clear();

            if (planes_2.Count == 0)
            {
                textBox10.Text = "Коллекция пуста, нечего удалять";
                return;
            }

            string model = textBox12.Text.Trim();
            if (string.IsNullOrWhiteSpace(model))
            {
                textBox10.Text = "Введите модель для удаления";
                return;
            }

            int removedCount = planes_2.RemoveAll(p => p.Model.Equals(model, StringComparison.OrdinalIgnoreCase));
            textBox10.Text = removedCount > 0
                ? $"Удалено самолётов: {removedCount}"
                : "Самолёты с такой моделью не найдены";

            UpdatePlanesCOL();
        }

        private void label20_Click(object sender, EventArgs e)
        {

        }

        private void button6_Click(object sender, EventArgs e)
        {
            textBox10.Clear();

            string avia = textBox6.Text.Trim();
            string model = textBox8.Text.Trim();

            if (string.IsNullOrWhiteSpace(avia))
            {
                textBox10.Text = "Авиакомпания обязательна";
                return;
            }
            if (string.IsNullOrWhiteSpace(model))
            {
                textBox10.Text = "Модель самолёта обязательна";
                return;
            }

            if (!int.TryParse(textBox7.Text.Trim(), out int year))
            {
                textBox10.Text = "Некорректный год выпуска";
                return;
            }
            if (year < 1900 || year > DateTime.Now.Year)
            {
                textBox10.Text = $"Год выпуска должен быть от 1900 до {DateTime.Now.Year}";
                return;
            }

            if (!int.TryParse(textBox9.Text.Trim(), out int seats))
            {
                textBox10.Text = "Некорректное количество мест";
                return;
            }
            if (seats < 1)
            {
                textBox10.Text = "Количество мест должно быть больше 0";
                return;
            }

            planes_2.Add(new PassengerPlane(avia, model, year, seats));
            textBox10.Text = $"Самолёт {model} добавлен";
            UpdatePlanesCOL();
        }

        private void button10_Click(object sender, EventArgs e)
        {
            textBox10.Clear();

            if (planes_2.Count == 0)
            {
                textBox10.Text = "Коллекция пуста, нечего искать";
                return;
            }

            string avia = textBox13.Text.Trim();
            if (string.IsNullOrWhiteSpace(avia))
            {
                textBox10.Text = "Введите авиакомпанию для поиска";
                return;
            }

            var found = planes_2.Where(p => p.AirlineName.Equals(avia, StringComparison.OrdinalIgnoreCase)).ToList();
            textBox10.Text = found.Count > 0
                ? $"Найдено {found.Count} самолётов: " + string.Join(", ", found.Select(p => p.Model))
                : "Самолёты не найдены";
        }

        private void button8_Click(object sender, EventArgs e)
        {
            if (planes_2.Count == 0)
            {
                textBox10.Text = "Коллекция уже пуста";
                return;
            }

            planes_2.Clear();
            textBox11.Clear();
            textBox10.Text = "Коллекция очищена";
        }

        private void button12_Click(object sender, EventArgs e)
        {
            textBox15.Clear();

            string avia = textBox19.Text.Trim();
            string model = textBox17.Text.Trim();

            if (string.IsNullOrWhiteSpace(avia) || string.IsNullOrWhiteSpace(model))
            {
                textBox15.Text = "Авиакомпания и модель обязательны";
                return;
            }

            if (!int.TryParse(textBox18.Text.Trim(), out int year) || year < 1900 || year > DateTime.Now.Year)
            {
                textBox15.Text = "Некорректный год";
                return;
            }

            if (!int.TryParse(textBox16.Text.Trim(), out int seats) || seats < 1)
            {
                textBox15.Text = "Некорректное количество мест";
                return;
            }

            planes_3.Add(nextPlaneId++, new PassengerPlane(avia, model, year, seats));
            textBox15.Text = $"Самолёт {model} добавлен";
            UpdateSortedPlanesCOL();
        }

        private void button13_Click(object sender, EventArgs e)
        {
            textBox15.Clear();

            if (!int.TryParse(textBox20.Text.Trim(), out int id))
            {
                textBox15.Text = "Некорректный iD";
                return;
            }

            if (planes_3.ContainsKey(id))
            {
                planes_3.Remove(id);
                textBox15.Text = $"Самолёт с iD {id} удалён";
            }
            else
            {
                textBox15.Text = $"Самолёт с iD {id} не найден";
            }

            UpdateSortedPlanesCOL();
        }

        private void button14_Click(object sender, EventArgs e)
        {
            textBox15.Clear();

            if (!int.TryParse(textBox21.Text.Trim(), out int id))
            {
                textBox15.Text = "Некорректный iD";
                return;
            }

            if (planes_3.ContainsKey(id))
            {
                PassengerPlane p = (PassengerPlane)planes_3[id];
                textBox15.Text = $"Найден самолёт: {p.AirlineName}-{p.Model}-{p.Year}-{p.Seats}";
            }
            else
            {
                textBox15.Text = $"Самолёт с iD {id} не найден";
            }
        }

        private void button11_Click(object sender, EventArgs e)
        {
            planes_3.Clear();
            textBox14.Clear();
            textBox15.Text = "Коллекция очищена";
        }
    }

    public class PassengerPlane
    {
        public string AirlineName { get; set; }
        public string Model { get; set; }
        public int Year { get; set; }
        public int Seats { get; set; }

        public PassengerPlane(string airline, string model, int year, int seats)
        {
            if (string.IsNullOrWhiteSpace(airline))
                throw new ArgumentException("Авиакомпания не может быть пустой");
            if (string.IsNullOrWhiteSpace(model))
                throw new ArgumentException("Модель не может быть пустой");
            if (year < 1900 || year > DateTime.Now.Year)
                throw new ArgumentException("Некорректный год выпуска");
            if (seats < 1)
                throw new ArgumentException("Количество мест не может быть меньше 1");

            AirlineName = airline;
            Model = model;
            Year = year;
            Seats = seats;
        }

        public override string ToString()
        {
            return $"{AirlineName}-{Model}-{Year}-{Seats}";
        }
    }
}
